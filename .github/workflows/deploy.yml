name: Deploy to EC2 with GitHub Actions

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]

jobs:
  build-and-deploy:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      # 1) 코드 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      # 2) JDK 21 설치 (빌드용)
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'corretto'

      # 3) Gradle 캐시
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4) gradlew 실행권한
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew


      # 5) 빌드 (테스트 제외)
      - name: Build with Gradle
        run: ./gradlew build -x test

      # 6) 빌드 산출물(SNAPSHOT) 파일명 추출 (단일 파일 보장)
      - name: Find and export JAR file name
        id: find_jar
        shell: bash
        run: |
          set -euo pipefail
          mapfile -t FILES < <(find build/libs -maxdepth 1 -type f -name "*-SNAPSHOT.jar" | sort)
          if [ ${#FILES[@]} -eq 0 ]; then
            echo "::error::No SNAPSHOT JAR file found in build/libs/"
            exit 1
          fi
          JAR_FILE_PATH="${FILES[0]}"
          JAR_FILE_NAME="$(basename "$JAR_FILE_PATH")"
          echo "Found JAR file: $JAR_FILE_NAME"
          echo "JAR_NAME=$JAR_FILE_NAME" >> "$GITHUB_OUTPUT"

      # (디버그) 로컬 빌드 산출물 확인
      - name: Debug - list local build/libs
        run: ls -al build/libs

      # 7) 원격 타겟 디렉터리 보장
      - name: Ensure target dir on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PEM_KEY }}
          script: |
            set -e
            mkdir -p /home/${USER}/Team15_BE

      # 8) 정확히 단일 파일만 전송 + 경로 납작화(strip_components: 2)
      - name: Copy JAR to EC2 (flatten path)
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PEM_KEY }}
          source: "build/libs/${{ steps.find_jar.outputs.JAR_NAME }}"
          target: "/home/${{ secrets.EC2_USER }}/Team15_BE"
          overwrite: true
          strip_components: 2

      # 9) EC2에서 파일 존재 확인(루트에 존재해야 함)
      - name: Verify file transfer on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PEM_KEY }}
          script: |
            set -euo pipefail
            APP_DIR="/home/${USER}/Team15_BE"
            echo "--- Full listing of ${APP_DIR} ---"
            ls -al "${APP_DIR}"
            echo "--- Verifying specific file ---"
            ls -l "${APP_DIR}/${{ steps.find_jar.outputs.JAR_NAME }}"

      # 10) 배포 & 실행 (심볼릭 링크 + 안전한 중지)
      - name: Deploy and Run on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PEM_KEY }}
          script: |
            set -Eeuo pipefail
            
            APP_DIR="/home/${USER}/Team15_BE"
            JAR_NAME="${{ steps.find_jar.outputs.JAR_NAME }}"
            APP_JAR="app.jar"
            LOG_DIR="${APP_DIR}/logs"
            
            cd "${APP_DIR}" || { echo "Failed to change directory to ${APP_DIR}"; exit 1; }
            
            if ! command -v java >/dev/null 2>&1; then
              echo "ERROR: 'java' command not found on EC2. Install JDK/JRE first."
              exit 1
            fi
            
            if [ ! -f "${JAR_NAME}" ]; then
              echo "ERROR: JAR not found: ${JAR_NAME}"
              ls -al .
              exit 1
            fi
            ln -sfn "${JAR_NAME}" "${APP_JAR}"
            echo "Linked ${JAR_NAME} -> ${APP_JAR}"
            
            EXISTING_PID=$(lsof -t -i:8080 || true)
            if [ -n "$EXISTING_PID" ]; then
              echo "Port 8080 in use by PID=$EXISTING_PID. Stopping..."
              kill -15 "$EXISTING_PID" || true
              sleep 5
              if ps -p "$EXISTING_PID" > /dev/null 2>&1; then
                echo "Process still alive. Sending SIGKILL..."
                kill -9 "$EXISTING_PID" || true
                sleep 2
              fi
            else
              echo "No process using port 8080."
            fi
            
            mkdir -p "${LOG_DIR}"
            LOG_FILE_NAME="$(date +'%Y-%m-%d_%H-%M-%S').log"
            LOG_FILE_PATH="${LOG_DIR}/${LOG_FILE_NAME}"
            
            echo "Starting new application (${APP_JAR})... Logging to ${LOG_FILE_PATH}"
            nohup java -Dspring.profiles.active=dev -jar "${APP_JAR}" > "${LOG_FILE_PATH}" 2>&1 &
            
            APP_PID=$!
            echo "App PID: $APP_PID"
            sleep 15
            if ps -p $APP_PID > /dev/null 2>&1; then
              echo "✅ Application started successfully. PID=$APP_PID"
            else
              echo "❌ ERROR: Application failed to start. Last 120 log lines:"
              tail -n 120 "${LOG_FILE_PATH}" || true
              exit 1
            fi
